// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id
  name              String
  email             String
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  isAnonymous       Boolean?
  conversations     Conversation[]
  conversationItems ConversationItem[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Conversation {
  id        String             @id
  title     String
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  messages  ConversationItem[]
}

model ConversationItem {
  id             String       @id
  content        String
  role           String
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  isStreaming    Boolean
  /// contains:
  /// - url
  /// - contentType
  attachments    Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  previousConversationItemId   String?
  multiNextConversationItemIds String[] @default([])
  activeNextConversationItemId String?

  @@index([userId, conversationId])
}
